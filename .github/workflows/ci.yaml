name: "CI Windows[MSVC & Clang-cl], Ubuntu & MacOS [Clang & GCC]"

on:
  push:
    branches: ["master"]
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/ci.yaml'
  pull_request:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/ci.yaml'

jobs:
  build:
    if: github.repository != 'TBlauwe/cpp_lib_starter'
    name: "[${{matrix.os}}] : ${{matrix.architecture}}-${{matrix.configuration}}-${{matrix.toolchain}}"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        configuration: [release]
        toolchain: [clang, gnu]
        exclude:
          - os: windows-latest
            toolchain: clang
          - os: windows-latest
            toolchain: gnu
        include:
          - os: windows-latest
            toolchain: clang-cl
          - os: windows-latest
            toolchain: msvc
          - architecture: x64

    env:
      preset_name: ${{matrix.architecture}}-${{matrix.toolchain}}-${{matrix.configuration}}
      build_directory: ./out/build/${{matrix.architecture}}-${{matrix.toolchain}}-${{matrix.configuration}}
      CPM_SOURCE_CACHE: ${{github.workspace}}/.cpm_cache

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Cache CPM dependencies"
        uses: actions/cache@v3
        with:
          path: ${{ env.CPM_SOURCE_CACHE }}
          key: cpm-${{ hashFiles('**/*.cmake', '**/CMakeLists.txt') }}
          enableCrossOsArchive: true

      - name: "Install msvc"
        if: ${{matrix.toolchain}} == msvc
        uses: ilammy/msvc-dev-cmd@v1

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - name: "Install CMake and Ninja"
        uses: lukka/get-cmake@latest

      - name: Build
        run: |
          cmake --preset ${{ env.preset_name }}
          cmake --build ${{ env.build_directory }}

      - name: Run tests
        run: ctest ${{ env.build_directory }}
